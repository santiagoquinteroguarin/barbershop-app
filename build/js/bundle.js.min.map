{"version":3,"sources":["app.js"],"names":["page","cita","name","date","time","services","startApp","showServices","showSection","changeSection","nextPage","previousPage","pagerButtons","showSummary","nameAppointment","dateAppointment","disablePreviousDay","timeAppointment","previousSection","document","querySelector","classList","remove","add","previousTab","querySelectorAll","forEach","link","addEventListener","e","preventDefault","parseInt","target","dataset","step","async","response","fetch","data","json","service","id","price","serviceName","createElement","textContent","servicePrice","serviceDiv","appendChild","serviceId","onclick","selectService","error","console","log","element","tagName","parentElement","contains","deleteService","addService","firstElementChild","nextElementSibling","filter","serviceObj","summaryDiv","firstChild","removeChild","Object","values","includes","noServices","headingAppointment","innerHTML","servicesAppointment","headingServices","containerService","textService","priceService","nameText","value","trim","length","showAlert","alert","dateInput","day","Date","getUTCDay","message","type","setTimeout","inputDate","nowDate","year","getFullYear","month","getMonth","disableDate","getDate","min","timeInput","hour","split"],"mappings":"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","file":"bundle.js","sourcesContent":["let page = 1;\n\nconst cita = {\n    name: '',\n    date: '',\n    time: '',\n    services: [],\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    startApp();\n});\n\nfunction startApp() {\n    showServices();\n\n    // Resalta el DIV actual según el tab al que se presiona\n    showSection();\n\n    // oculta o muestra una sección según el tab al que se presiona\n    changeSection();\n\n    // paginación siguiente y anterior\n    nextPage();\n    \n    previousPage();\n\n    // Comprueba la pagina actual para ocultar o mostrar la paginación\n    pagerButtons();\n\n    // muestra el resumen de la cita o mensaje de error\n    showSummary();\n\n    // almacena el nombre de la cita en el objeto\n    nameAppointment();\n\n    // alamcena la fecha de la cita en el objeto\n    dateAppointment();\n\n    // deshabilita días pasados\n    disablePreviousDay();\n\n    // Almacena la hora de la cita en el objeto\n    timeAppointment();\n}\n\nfunction showSection() {\n    // eliminar show-section de la section anterior\n    const previousSection = document.querySelector('.show-section');\n    if(previousSection) {\n        previousSection.classList.remove('show-section');\n    }\n\n    const currentSection = document.querySelector(`#step-${page}`);\n    currentSection.classList.add('show-section');\n\n    const previousTab = document.querySelector('.tabs .current');\n    if(previousTab) {\n        // Eliminar la clase de current en el anterior\n        previousTab.classList.remove('current');\n    }\n    \n    // resalta el tab actual\n    const tab = document.querySelector(`[data-step=\"${page}\"]`);\n    tab.classList.add('current');\n}\n\nfunction changeSection() {\n    const links = document.querySelectorAll('.tabs button');\n    links.forEach(link => {\n        link.addEventListener('click', e => {\n            e.preventDefault();\n            page = parseInt(e.target.dataset.step);\n\n            // llamar la funcion de mostrar la seccion\n            showSection();\n\n            pagerButtons();\n        })\n    })\n}\n\nasync function showServices() {\n    try {\n        const response = await fetch('./servicios.json');\n        const data = await response.json();\n        const { services } = data;\n\n        // Generar HTML\n        services.forEach(service => {\n            const { id, name, price } = service;\n\n            // DOM Scripting\n            // Generar nombre del servicio\n            const serviceName = document.createElement('P');\n            serviceName.textContent = name;\n            serviceName.classList.add('service-name');\n            // Generar precio del servicio\n            const servicePrice = document.createElement('P');\n            servicePrice.textContent = `$ ${price}`;\n            servicePrice.classList.add('service-price');\n\n            // Generar div contenedor del servicio\n            const serviceDiv = document.createElement('DIV');\n            serviceDiv.classList.add('service');\n\n            // inyectar precio y nombre al div del servicio\n            serviceDiv.appendChild(serviceName);\n            serviceDiv.appendChild(servicePrice);\n            serviceDiv.dataset.serviceId = id;\n\n            // selcciona un servicio para la cita\n            serviceDiv.onclick = selectService;\n\n            // inyectar al HTML\n            document.querySelector('#services').appendChild(serviceDiv);\n        });\n    } catch (error) {\n        console.log('error');\n    }\n}\n\nfunction selectService(e) {\n    let element;\n    // forzar que el elemento al cual le damos click sea el div\n    if(e.target.tagName === 'P') {\n        element = e.target.parentElement;\n    } else {\n        element = e.target;\n    }\n\n    // cuando seleccionen un servicio añadirle la clase seleccionado\n    if(element.classList.contains('selected')) {\n        element.classList.remove('selected');\n\n        const id = parseInt(element.dataset.serviceId);\n        // eliminar servicio\n        deleteService(id);\n    } else {\n        element.classList.add('selected');\n\n        const serviceObj = {\n            id: parseInt(element.dataset.serviceId),\n            name: element.firstElementChild.textContent,\n            price: element.firstElementChild.nextElementSibling.textContent,\n        }\n        // agregar servicio\n        addService(serviceObj);\n    }\n}\n\nfunction deleteService() {\n    const { services } = cita;\n    cita.services = services.filter(service => service.id !== id);\n}\n\nfunction addService(serviceObj) {\n    const { services } = cita;\n\n    cita.services = [...services, serviceObj];\n}\n\nfunction nextPage() {\n    const nextPage = document.querySelector('#next');\n    nextPage.addEventListener('click', () => {\n        page++;\n        // volver a comprobar en que pagina esta el paginador\n        pagerButtons();\n    });\n}\n\nfunction previousPage() {\n    const previousPage = document.querySelector('#previous');\n    previousPage.addEventListener('click', () => {\n        page--;\n        // volver a comprobar en que pagina esta el paginador\n        pagerButtons();\n    });\n}\n\nfunction pagerButtons() {\n    const nextPage = document.querySelector('#next');\n    const previousPage = document.querySelector('#previous');\n\n    if(page === 1) {\n        previousPage.classList.add('hide')\n    } else if(page === 3) {\n        nextPage.classList.add('hide');\n        previousPage.classList.remove('hide');\n        // carga el resumen de la cita\n        showSummary();\n    } else {\n        previousPage.classList.remove('hide');\n        nextPage.classList.remove('hide');\n    }\n\n    // cambiar la seccion por la de la pagina\n    showSection();\n}\n\nfunction showSummary() {\n    const { name, date, time, services } = cita;\n\n    // seleccionar resumen\n    const summaryDiv = document.querySelector('.summary-content');\n\n    // limpia el HTML previo\n    while(summaryDiv.firstChild) {\n        summaryDiv.removeChild(summaryDiv.firstChild);\n    }\n\n    // validación para saber que los campos estan vacios\n    if(Object.values(cita).includes('')) {\n        const noServices = document.createElement('P');\n        noServices.textContent = 'Faltan datos de servicios, hora, fecha o nombre';\n        noServices.classList.add('invalid-appointment');\n        \n        // agregar a resumen div\n        summaryDiv.appendChild(noServices);\n\n        return;\n    }\n\n    const headingAppointment = document.createElement('H3');\n    headingAppointment.textContent = 'Resumen de Cita';\n\n    // mostrar el resumen\n    const nameAppointment = document.createElement('P');\n    nameAppointment.innerHTML = `<span>Nombre:</span> ${name}`;\n\n    const dateAppointment = document.createElement('P');\n    dateAppointment.innerHTML = `<span>Fecha:</span> ${date}`;\n\n    const timeAppointment = document.createElement('P');\n    timeAppointment.innerHTML = `<span>Nombre:</span> ${time}`;\n\n    const servicesAppointment = document.createElement('DIV');\n    servicesAppointment.classList.add('summary-services');\n\n    // creando titulo\n    const headingServices = document.createElement('H3');\n    headingServices.textContent = 'Resumen de Servicios';\n\n    servicesAppointment.appendChild(headingServices);\n\n    // iterar sobre el arreglo de servicios\n    services.forEach(service => {\n        const { name, price } = service;\n        const containerService = document.createElement('DIV');\n        containerService.classList.add('container-service');\n\n        const textService = document.createElement('P');\n        textService.textContent = name;\n\n        const priceService = document.createElement('P');\n        priceService.classList.add('price');\n        priceService.textContent = price;\n\n        // colocar precio y texto en el div\n        containerService.appendChild(textService);\n        containerService.appendChild(priceService);\n\n        servicesAppointment.appendChild(containerService);\n    });\n\n    summaryDiv.appendChild(headingAppointment);\n    summaryDiv.appendChild(nameAppointment);\n    summaryDiv.appendChild(dateAppointment);\n    summaryDiv.appendChild(timeAppointment);\n    summaryDiv.appendChild(servicesAppointment);\n}\n\nfunction nameAppointment() {\n    const nameInput = document.querySelector('#name');\n\n    nameInput.addEventListener('input', (e) => {\n        const nameText = e.target.value.trim();\n\n        // validacion de que nombre texto debe tener algo\n        if(nameText === '' || nameText.length < 2) {\n            showAlert('Nombre no valído', 'error');\n        } else {\n            const alert = document.querySelector('.alert');\n            if(alert) {\n                alert.remove();\n            }\n            cita.name = nameText;\n        }\n    });\n}\n\nfunction dateAppointment() {\n    const dateInput = document.querySelector('#date');\n\n    dateInput.addEventListener('input', (e) => {\n        const day = new Date(e.target.value).getUTCDay();\n        \n        // validacion de que nombre texto debe tener algo\n        if([1, 0].includes(day)) {\n            e.preventDefault();\n            dateInput.value = '';\n            showAlert('Seleccionaste lunes lo cual no es valido', 'error');\n        } else {\n            cita.date = dateInput.value;\n        }\n    });\n}\n\nfunction showAlert(message, type) {\n\n    // Si hay una alerta previa no crear otra\n    const alertPrevious = document.querySelector('.alert');\n    if(alertPrevious) {\n        return;\n    }\n\n    const alert = document.createElement('div');\n    alert.textContent = message;\n    alert.classList.add('alert');\n\n    if(type === 'error') {\n        alert.classList.add('error');\n    }\n\n    // insertar en el HTML\n    const form = document.querySelector('form');\n    form.appendChild(alert);\n\n    // Eliminar la alerta despues de 3 seg\n    setTimeout(() => {\n        alert.remove();\n    }, 3000);\n}\n\nfunction disablePreviousDay() {\n    const inputDate = document.querySelector('#date');\n\n    const nowDate = new Date();\n    const year = nowDate.getFullYear();\n    let month = nowDate.getMonth() + 1;\n    const day = nowDate.getDate() + 1;\n\n    if(month >= 1 && month < 9) {\n        month = `0${month}`;\n    }\n\n    // formato AAAA-MM-DD\n    const disableDate = `${year}-${month}-${day}`;\n    inputDate.min = disableDate;\n}\n\nfunction timeAppointment() {\n    const timeInput = document.querySelector('#hour');\n\n    timeInput.addEventListener('input', e => {\n        const timeAppointment = e.target.value;\n        const hour = timeAppointment.split(':');\n\n        if(hour[0] < 10 || hour[0] > 19) {\n            showAlert('Hora no válida', 'error');\n            setTimeout(() => {\n                timeInput.value = '';\n            }, 3000);\n        } else {\n            cita.time = timeAppointment;\n        }\n    });\n}"]}